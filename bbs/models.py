from django.db import models
from projects.models import Project, Series

class BB(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    series = models.ForeignKey(Series, on_delete=models.CASCADE)
    bb_smi = models.CharField(max_length=75)
    bb_id = models.CharField(max_length=4)
    count = models.IntegerField()
    bb_tag = models.CharField(max_length=1)
    bb_flag = models.CharField(max_length=75,null=True, blank=True)
    BBB_Brain_count = models.IntegerField(null=True, blank=True)
    BBB_Brain_median = models.FloatField(null=True, blank=True)
    BBB_Brain_score = models.FloatField(null=True, blank=True)
    BBB_Brain_Plasma_ratio_count = models.IntegerField(null=True, blank=True)
    BBB_Brain_Plasma_ratio_median = models.FloatField(null=True, blank=True)
    BBB_Brain_Plasma_ratio_score = models.FloatField(null=True, blank=True)
    BBB_Plasma_count = models.IntegerField(null=True, blank=True)
    BBB_Plasma_median = models.FloatField(null=True, blank=True)
    BBB_Plasma_score = models.FloatField(null=True, blank=True)
    BBB_ratio_BrainPlasma_count = models.IntegerField(null=True, blank=True)
    BBB_ratio_BrainPlasma_median = models.FloatField(null=True, blank=True)
    BBB_ratio_BrainPlasma_score = models.FloatField(null=True, blank=True)
    BB_fu_count = models.IntegerField(null=True, blank=True)
    BB_fu_median = models.FloatField(null=True, blank=True)
    BB_fu_score = models.FloatField(null=True, blank=True)
    CYP_shift_count = models.IntegerField(null=True, blank=True)
    CYP_shift_median = models.FloatField(null=True, blank=True)
    CYP_shift_score = models.FloatField(null=True, blank=True)
    CYP_testo_count = models.IntegerField(null=True, blank=True)
    CYP_testo_median = models.FloatField(null=True, blank=True)
    CYP_testo_score = models.FloatField(null=True, blank=True)
    CYP_testo_rank = models.IntegerField(null=True, blank=True)
    EC50_main_count = models.IntegerField(null=True, blank=True)
    EC50_main_median = models.FloatField(null=True, blank=True)
    EC50_main_score = models.FloatField(null=True, blank=True)
    EC50_main_rank = models.IntegerField(null=True, blank=True)
    GSH_count = models.IntegerField(null=True, blank=True)
    GSH_median = models.FloatField(null=True, blank=True)
    GSH_score = models.FloatField(null=True, blank=True)
    hERG_IC20_count = models.IntegerField(null=True, blank=True)
    hERG_IC20_median = models.FloatField(null=True, blank=True)
    hERG_IC20_score = models.FloatField(null=True, blank=True)
    HLM_count = models.IntegerField(null=True, blank=True)
    HLM_median = models.FloatField(null=True, blank=True)
    HLM_score = models.FloatField(null=True, blank=True)
    HLM_rank = models.IntegerField(null=True, blank=True)
    logD_count = models.IntegerField(null=True, blank=True)
    logD_median = models.FloatField(null=True, blank=True)
    logD_score = models.FloatField(null=True, blank=True)
    MDR1_PappAB_count = models.IntegerField(null=True, blank=True)
    MDR1_PappAB_median = models.FloatField(null=True, blank=True)
    MDR1_PappAB_score = models.FloatField(null=True, blank=True)
    MDR1_efflux_count = models.IntegerField(null=True, blank=True)
    MDR1_efflux_median = models.FloatField(null=True, blank=True)
    MDR1_efflux_score = models.FloatField(null=True, blank=True)
    min_ratio_hM1R_hM2R_count = models.IntegerField(null=True, blank=True)
    min_ratio_hM1R_hM2R_median = models.FloatField(null=True, blank=True)
    min_ratio_hM1R_hM2R_score = models.FloatField(null=True, blank=True)
    OX1_IP1_EC50_count = models.IntegerField(null=True, blank=True)
    OX1_IP1_EC50_median = models.FloatField(null=True, blank=True)
    OX1_IP1_EC50_score = models.FloatField(null=True, blank=True)
    OX1_IP1_EC50_rank = models.IntegerField(null=True, blank=True)
    PPB_fu_count = models.IntegerField(null=True, blank=True)
    PPB_fu_median = models.FloatField(null=True, blank=True)
    PPB_fu_score = models.FloatField(null=True, blank=True)
    PXR_EC50_count = models.IntegerField(null=True, blank=True)
    PXR_EC50_median = models.FloatField(null=True, blank=True)
    PXR_EC50_score = models.FloatField(null=True, blank=True)
    ratio_hOX1R_hOX2R_count = models.IntegerField(null=True, blank=True)
    ratio_hOX1R_hOX2R_median = models.FloatField(null=True, blank=True)
    ratio_hOX1R_hOX2R_score = models.FloatField(null=True, blank=True)
    ratio_hOX1R_hOX2R_rank = models.IntegerField(null=True, blank=True)
    sol_FaSSIF_count = models.IntegerField(null=True, blank=True)
    sol_FaSSIF_median = models.FloatField(null=True, blank=True)
    sol_FaSSIF_score = models.FloatField(null=True, blank=True)
    sol_pH6_count = models.IntegerField(null=True, blank=True)
    sol_pH6_median = models.FloatField(null=True, blank=True)
    sol_pH6_score = models.FloatField(null=True, blank=True)
    BPI_calc_count = models.IntegerField(null=True, blank=True)
    BPI_calc_median = models.FloatField(null=True, blank=True)
    BPI_calc_score = models.FloatField(null=True, blank=True)

    def __str__(self):
        return str(self.pk)
